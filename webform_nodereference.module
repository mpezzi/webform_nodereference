<?php

/**
 * @file
 * Provides a webform nodereference component.
 */

/**
 * Implements hook_menu().
 */
function webform_nodereference_menu() {
  return array(
    'admin/settings/webform_nodereference' => array(
      'title' => 'Webform Node Reference',
      'description' => t('Change settings for webform node reference.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('webform_nodereference_admin_settings_form'),
      'access arguments' => array('administer nodes'),
      'file' => 'webform_nodereference.admin.inc',
    ),
  );
}

/**
 * Implements hook_nodeapi().
 */
function webform_nodereference_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'load':
      webform_nodereference_node_load($node);
      break;
    case 'view':
      //webform_nodereference_node_view($node);
      break;
  }
}

/**
 * Implements hook_node_load().
 */
function webform_nodereference_node_load(&$node) {
  $result = db_query("SELECT * FROM {webform_nodereference_count} WHERE nid = %d", $node->nid);
  while ( $ref = db_fetch_object($result) ) {
    $node->webform_nodereference[$ref->wnid][$ref->cid] = $ref->total;
  }
}

/**
 * Implements hook_node_view().
 */
function webform_nodereference_node_view(&$node) {
  $items = array();
  
  if ( isset($node->webform_nodereference) && !empty($node->webform_nodereference) ) {
    foreach ( $node->webform_nodereference as $nid => $ref ) {
      foreach ( $ref as $cid => $total ) {
        $items[] = $nid .'->'. $cid .'->'. $total;
      }
    }
  }
  
  if ( count($items) ) {
    $node->content['webform_nodereference'] = array(
      '#value' => theme('item_list', $items),
      '#weight' => -100,
    );
  }
}

/**
 * Implements hook_webform_component_info().
 */
function webform_nodereference_webform_component_info() {
  return array(
    'nodereference' => array(
      'label' => t('Node Reference'),
      'description' => t('Reference a node.'),
      'features' => array(
        'csv' => TRUE,
        'email' => FALSE,
        'email_address' => FALSE,
        'email_name' => FALSE,
        'required' => TRUE,
        'conditional' => FALSE,
        'group' => FALSE,
        'attachment' => FALSE,
      ),
      'file' => 'webform_nodereference.inc',
    ),
  );
}

/**
 * Implements hook_webform_submission_insert().
 */
function webform_nodereference_webform_submission_insert($node, $submission) {
  if ( !empty($node->webform['components']) ) {
    foreach ( $node->webform['components'] as $component ) {
      if ( $component['type'] == 'nodereference' ) {
        $rnid = $submission->data[$component['cid']]['value'][0];
        
        // Insert a new reference record.
        db_query("INSERT INTO {webform_nodereference} (nid, cid, sid, rnid) VALUES (%d, %d, %d, %d)", $component['nid'], $component['cid'], $submission->sid, $rnid);
        
        // Create or increase current count.
        if ( db_result(db_query("SELECT COUNT(*) FROM {webform_nodereference_count} WHERE nid = %d AND wnid = %d AND cid = %d", $rnid, $component['nid'], $component['cid'])) ) {
          db_query("UPDATE {webform_nodereference_count} SET total = ( total + 1 ) WHERE nid = %d AND wnid = %d AND cid = %d", $rnid, $component['nid'], $component['cid']);
        }
        else {
          db_query("INSERT INTO {webform_nodereference_count} (nid, wnid, cid, total) VALUES (%d, %d, %d, %d)", $rnid, $component['nid'], $component['cid'], 1);
        }
      }
    }
  }
}

/**
 * Implements hook_webform_submission_update().
 */
function webform_nodereference_webform_submission_update($node, $submission) {
  if ( !empty($node->webform['components']) ) {
    foreach ( $node->webform['components'] as $component ) {
      if ( $component['type'] == 'nodereference' ) {
        $rnid = $submission->data[$component['cid']]['value'][0];
        
        // See if we need to change the reference count.
        $reference = db_fetch_object(db_query("SELECT * FROM {webform_nodereference} WHERE sid = %d", $submission->sid));
        if ( isset($reference->rnid) && $reference->rnid != $rnid ) {
          
          // Decrease old value.
          db_query("UPDATE {webform_nodereference_count} SET total = ( total - 1 ) WHERE nid = %d AND wnid = %d AND cid = %d", $reference->rnid, $component['nid'], $component['cid']);
          
          // Create or increase current count.
          if ( db_result(db_query("SELECT COUNT(*) FROM {webform_nodereference_count} WHERE nid = %d AND wnid = %d AND cid = %d", $rnid, $component['nid'], $component['cid'])) ) {
            db_query("UPDATE {webform_nodereference_count} SET total = ( total + 1 ) WHERE nid = %d AND wnid = %d AND cid = %d", $rnid, $component['nid'], $component['cid']);
          }
          else {
            db_query("INSERT INTO {webform_nodereference_count} (nid, wnid, cid, total) VALUES (%d, %d, %d, %d)", $rnid, $component['nid'], $component['cid'], 1);
          }
        }
        
        // Update reference record.
        db_query("UPDATE {webform_nodereference} SET rnid = %d WHERE sid = %d", $rnid, $submission->sid);
      }
    }
  }
}

/**
 * Implements hook_webform_submission_delete().
 */
function webform_nodereference_webform_submission_delete($node, $submission) {
  if ( !empty($node->webform['components']) ) {
    foreach ( $node->webform['components'] as $component ) {
      if ( $component['type'] == 'nodereference' ) {
        $rnid = $submission->data[$component['cid']]['value'][0];
        
        // Remove reference record.
        db_query("DELETE FROM {webform_nodereference} WHERE sid = %d LIMIT 1", $submission->sid);
        
        // Update reference count.
        db_query("UPDATE {webform_nodereference_count} SET total = ( total - 1 ) WHERE nid = %d AND wnid = %d AND cid = %d AND total != 0", $rnid, $component['nid'], $component['cid']);
      }
    }
  }
}

/**
 * Implements hook_views_api().
 */
function webform_nodereference_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'webform_nodereference') . '/views',
  );
}
